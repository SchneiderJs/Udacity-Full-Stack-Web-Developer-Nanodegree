Jinja allows to embed non-html into html files

MVC stands for Model-View-Controller, a common pattern for architecting web applications
Describes the 3 layers of the application we are developing

Layers
    - Models manage data and business logic for us. What happens inside models and database, capturing logical relationships and 
      properties across the web app objects
    - Views handles display and representation logic. What the user sees (HTML, CSS, JS from the user's perspective)
    - Controllers: routes commands to the models and views, containing control logic. Control how commands are sent to models and views, and 
      how models and views wound up interacting with each other.

MVC Development: How we'd add Create To-Do item functionality

    On the view: implement an HTML form
    On the controller: retrieve the user's input, and manipulate models
    On the models: create a record in our database, and return the newly created to-do item to the controller
    On the controller: take the newly created to-do item, and decide how to update the view with it.


-- Getting User Data in Flask ---
:: Methods of getting user data from the view (in Flask) ::

There are 3 methods of getting user data from a view to a controller. See the image below.
    URL query parameters
    Forms
    JSON

URL query parameters
    URL query parameters are listed as key-value pairs at the end of a URL, preceding a "?" question mark. E.g. www.example.com/hello?my_key=my_value.

Form data
    request.form.get('<name>') reads the value from a form input control (text input, number input, password input, etc) 
    by the name attribute on the input HTML element.
    
    Note : request.args.get, request.form.get both accept an optional second parameter, e.g. 
    request.args.get('foo', 'my default'), set to a default value, in case the result is empty.

JSON
    request.data retrieves JSON as a string. 
    Then we'd take that string and turn it into python constructs by calling json.loads on the request.data string to 
    turn it into lists and dictionaries in Python.

:: Using HTML form submission to get the data ::

    forms take an action (name of the route) and method (route method) to submit data to our server.
    The name attribute on a form control element is the key used to retrieve data from request.get(<key>).
    All forms either define a submit button, or allow the user to hit ENTER on an input to submit the form.


:: Form methods POST vs GET ::
The way form data traverses from the client to server differs based on whether we are using a GET or a POST method on the form.

The POST submission

    On submit, we send off an HTTP POST request to the route /create with a request body
    The request body stringifies the key-value pairs of fields from the form (as part of the name attribute) along with their values.

The GET submission

    Sends off a GET request with URL query parameters that appends the form data to the URL.
    Ideal for smaller form submissions.

POSTs are ideal for longer form submissions, since URL query parameters can only be so long compared to request bodies (max 2048 characters). 
Moreover, forms can only send POST and GET requests, and nothing else.

--- Using AJAX to send data to flask ---
:: Using AJAX to send data asynchronously ::

    Data request are either synchronous or async (asynchronous)
    Async data requests are requests that get sent to the server and back to the client without a page refresh.
    Async requests (AJAX requests) use one of two methods:
        XMLHttpRequest
        Fetch (modern way)

    fetch is another window object that lets you send HTTP requests
    fetch(<url-route>, <object of request parameters>)

--- Using sessions in controllers ---

    Commits can succeed or fail. On fail, we want to rollback the session to avoid potential implicit commits done by the database on closing a connection.
    Good practice is to close connections at the end of every session used in a controller, to return the connection back to the connection pool.

    The route handler should always return something or raise an intentional exception, in the case of an error. 
    To fix this with a simple solution, we can simply import abort from Flask and we can call abort(<status code>), 
    e.g. with status code 500, abort(500) to rise an HTTPException for an Internal Server Error, in order to abort a 
    request and prevent it from expecting a returned result.

--- --- ---
non asynchronous route: 

@app.route('/todos/create', methods=['POST'])
def create_todo():
    description = request.form.get('description', '')
    todo = Todo(description=description)
    db.session.add(todo)
    db.session.commit()
    return redirect(url_for('index')) 

<html>
  <head>
    <title>Todo App</title>
  </head>
  <body>
    <ul>
      {% for d in data %}
      <li>{{ d.description }}</li>
      {% endfor %}
    </ul>
  </body>
</html>


--- --- ---
asynchronous route:

@app.route('/todos/create', methods=['POST'])
def create_todo():
    error = False
    body = {}
    try:
        description = request.get_json()['description']
        todo = Todo(description=description)
        db.session.add(todo)
        db.session.commit()
        body['description'] = todo.description
    except:
        error = True
        db.session.rollback()
        print(sys.exc_info())
    finally:
        db.session.close()
    if error:
        abort(400)
    else:
        return jsonify(body)


<html>
  <head>
    <title>Todo App</title>
    <style>
        .hidden {
            display: none;
        }
    </style>
  </head>
  <body>
    <form id="form">
      <input type="text" name="description" id="description"/>
      <input type="submit" value="Create" />
    </form>
    <div id="error" class="hidden">Something went wrong!</div>
    <ul id="todos">
      {% for d in data %}
      <li>{{ d.description }}</li>
      {% endfor %}
    </ul>
    <script>
        document.getElementById('form').onsubmit = function(e) {
            e.preventDefault();
            fetch('/todos/create', {
                method: 'POST',
                body: JSON.stringify({
                    'description': document.getElementById('description').value
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(function(response) {
                return response.json();
            })
            .then(function(jsonResponse) {
                console.log(jsonResponse);
                const liItem = document.createElement('LI');
                liItem.innerHTML = jsonResponse['description'];
                document.getElementById('todos').appendChild(liItem);
            })
            .catch(function(){
                document.getElementById('error').className='';
            });
        }
    </script>
  </body>
</html>
