--- Model.query ---

    db.Model.query offers us the Query object. The Query object lets us generate SELECT statements that let us query and return slices of data from our database.
    Query has method chaining. You can chain one query method to another (indefinitely), getting back more query objects, until you chain it with a terminal method that returns a non-query object like count(), all(), first(), delete(), etc.
    The Query object can be accessed on a model using either:
        MyModel.query directly on the model, or
        db.session.query(MyModel) using db.session.query instead.


--- SQLAlchemy Object Lifecycle — Part 1 ---

Recall
We can insert new records into the database using SQLAlchemy by running
    
    person = Person(name='Amy')
    db.session.add(person)
    db.session.commit()

    which will build a transaction for inserting in a person instance in our model/table, and persist it to the database upon calling commit().


Within a session, we create transactions every time we want to commit work to the database.
Proposed changes are not immediately committed to the database and instead go through stages to allow for undos.
The ability to undo is allowed via db.session.rollback()

Stages:

    Transient: an object exists, it was defined.

    user1 = User(name='Amy')

    ...but not attached to a session (yet).

    Pending: an object was attached to a session. "Undo" becomes available via db.session.rollback(). Waits for a flush to happen

    Flushed: about ready to be committed to the database, translating actions into SQL command statements for the engine.

    Committed: manually called for a change to persist to the database (permanently); session's transaction is cleared for a new set of changes.


--- SQLAlchemy Object Lifecycle — Part 2 ---

A flush takes pending changes, and translates them into commands ready to be committed. It occurs:

    when you call Query. Or
    on db.session.commit()

A commit leads to persisted changes on the database + lets the db.session start with a new transaction.

When a statement has been flushed already, SQLAlchemy knows not to do the work again of translating actions to SQL statements.